#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass scrbook
\begin_preamble
% in case somebody want to have the label "Equation"
%\renewcommand{\eqref}[1]{Equation~(\negthinspace\autoref{#1})}

% that links to image floats jumps to the beginning
% of the float and not to its caption
\usepackage[figure]{hypcap}

% the pages of the TOC is numbered roman
% and a pdf-bookmark for the TOC is added
\let\myTOC\tableofcontents
\renewcommand\tableofcontents{%
  \frontmatter
  \pdfbookmark[1]{\contentsname}{}
  \myTOC
  \mainmatter }

% makes caption labels bold
% for more info about these settings, see
% https://ctan.org/tex-archive/macros/latex/contrib/koma-script/doc/scrguien.pdf
\setkomafont{captionlabel}{\bfseries}
\setcapindent{1em}

% enables calculations
\usepackage{calc}

% fancy page header/footer settings
% for more information see section 9 of
% ftp://www.ctan.org/pub/tex-archive/macros/latex2e/contrib/fancyhdr/fancyhdr.pdf
\renewcommand{\chaptermark}[1]{\markboth{#1}{#1}}
\renewcommand{\sectionmark}[1]{\markright{\thesection\ #1}}

% increases the bottom float placement fraction
\renewcommand{\bottomfraction}{0.5}

% avoids that floats are placed above its sections
\let\mySection\section\renewcommand{\section}{\suppressfloats[t]\mySection}

% increases link area for cross-references and autoname them
% if you change the document language to e.g. French
% you must change "extrasenglish" to "extrasfrench"
% if you uncomment the following lines, you cannot use the reference version Ref+Text in LyX
%\AtBeginDocument{%
% \renewcommand{\ref}[1]{\autoref{#1}}
%}
%\def\refnamechanges{%
% \renewcommand*{\equationautorefname}[1]{}
% \renewcommand{\sectionautorefname}{sec.\negthinspace}
% \renewcommand{\subsectionautorefname}{sec.\negthinspace}
% \renewcommand{\subsubsectionautorefname}{sec.\negthinspace}
% \renewcommand{\figureautorefname}{Fig.\negthinspace}
% \renewcommand{\tableautorefname}{Tab.\negthinspace}
%}
%\@ifpackageloaded{babel}{\addto\extrasenglish{\refnamechanges}}{\refnamechanges}
\end_preamble
\options intoc,bibliography=totoc,index=totoc,BCOR10mm,captions=tableheading,titlepage
\use_default_options true
\master project.lyx
\begin_modules
customHeadersFooters
\end_modules
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "lmodern" "default"
\font_sans "lmss" "default"
\font_typewriter "lmtt" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures false
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command bibtex
\index_command default
\float_placement H
\paperfontsize 12
\spacing single
\use_hyperref true
\pdf_title "Your title"
\pdf_author "Your name"
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle false
\pdf_quoted_options "pdfpagelayout=OneColumn, pdfnewwindow=true, pdfstartview=XYZ, plainpages=false"
\papersize a4paper
\use_geometry false
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\branch Standalone
\selected 1
\filename_suffix 0
\color #ff0000
\end_branch
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 2
\paragraph_separation skip
\defskip medskip
\is_math_indent 1
\math_indentation default
\math_numbering_side default
\quotes_style french
\dynamic_quotes 0
\papercolumns 1
\papersides 2
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Left Header
\begin_inset Argument 1
status open

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
chaptername
\end_layout

\end_inset


\begin_inset space ~
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
thechapter
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
rightmark
\end_layout

\end_inset


\end_layout

\begin_layout Right Header
\begin_inset Argument 1
status open

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
leftmark
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Left Footer
\begin_inset Argument 1
status open

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
thepage
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Center Footer

\end_layout

\begin_layout Right Footer
\begin_inset Argument 1
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
thepage
\end_layout

\end_inset


\end_layout

\begin_layout Part
Testing e verifica del software
\end_layout

\begin_layout Chapter
Code Testing
\end_layout

\begin_layout Section

\series bold
Test Framework
\series default
 (Unittest)
\end_layout

\begin_layout Standard
In questa sezione ci si concentrerà sulla creazione e l'implementazione
 di numerosi test sulle varie componenti dell'applicazione con particolare
 attenzione ai models, ai forms e alle views.
\end_layout

\begin_layout Standard
Per effettuare i test useremo 
\emph on
unittest
\emph default
, framework per il testing ispirato da 
\emph on
JUnit
\emph default
.
 In particolar modo nel file
\emph on
 settings.py
\emph default
 dell'applicazione è stata definita la creazione automatica di un database
 di prova 
\emph on
testdatabase
\emph default
 in modo da non avere ripercussioni sul database vero: ad ogni sessione
 di test verrà creato da zero un database sulla base dei models definiti
 e verrà distrutto al termine.
\end_layout

\begin_layout Standard
TODO (Algoritmi)
\end_layout

\begin_layout Standard
TODO (Numeri di test fatti)
\end_layout

\begin_layout Subsection
Models tests
\end_layout

\begin_layout Standard
Sono stati eseguiti numerosi test sulla creazione di ogni modello presente
 nelle varie componenti dell'applicazione.
\end_layout

\begin_layout Standard
Un esempio di caso di test è il seguente per la creazione di una farmacia:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

class PharmacyModelTest(TestCase):     
\end_layout

\begin_layout Plain Layout

	def create_pharmacy(self, name="Farmacia", image="farmacia.png", x=50, y=0,
 slot4hMinWeek=5, location="Bergamo",             description="Text"): 
        
\end_layout

\begin_layout Plain Layout

		user = User.objects.create(username='TestUser')         
\end_layout

\begin_layout Plain Layout

		return Pharmacy.objects.create(owner=user, name=name, image=image, x=x,
 y=y, slot4hMinWeek=slot4hMinWeek,                                     
   location=location, description=description)
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

	def test_pharmacy_creation(self):         
\end_layout

\begin_layout Plain Layout

		w = self.create_pharmacy()         
\end_layout

\begin_layout Plain Layout

		self.assertTrue(isinstance(w, Pharmacy))         
\end_layout

\begin_layout Plain Layout

		fields = w.id, w.owner, w.name         
\end_layout

\begin_layout Plain Layout

		self.assertEqual(w.__unicode__(), fields)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In totale sono state create 6 classi per testare i models, ognuna con i
 rispettivi metodi e parametri per testare la corretta istanziazione di
 un modello nel database.
\end_layout

\begin_layout Subsection
Forms tests
\end_layout

\begin_layout Standard
Sono stati eseguiti numerosi test sulla compilazione di ogni form presente
 nelle varie componenti dell'applicazione.
\end_layout

\begin_layout Standard
Un esempio di caso di test è il seguente per la compilazione del contact
 form:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

class ContactFormTest(TestCase):     
\end_layout

\begin_layout Plain Layout

	def test_valid_form(self):         
\end_layout

\begin_layout Plain Layout

		data = {'name': "Test", 'email': "test@mail.com", 'subject': "Text", 'message':
 "Text"}         
\end_layout

\begin_layout Plain Layout

		form = ContactForm(data=data)         
\end_layout

\begin_layout Plain Layout

		self.assertTrue(form.is_valid())
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In totale sono state create 4 classi per testare i forms, ognuna con i rispettiv
i metodi per verificare la corretta compilazione dei campi e l'invio del
 form.
 In particolare un metodo che testa un caso positivo in cui sono passati
 correttamente tutti i parametri necessari, e un caso negativo in cui si
 testa il rifuto dell'invio del form dovuto alla mancanza di campi da compilare
 oppure a parametri non corretti.
\end_layout

\begin_layout Standard
È stata fatta anche una versione parametrizzata (vedi sezione 
\emph on
Test parametrici
\emph default
).
\end_layout

\begin_layout Subsection
Views tests
\end_layout

\begin_layout Standard
Sono stati eseguiti numerosi test sulle varie funzioni dell'applicazione.
\end_layout

\begin_layout Standard
Un esempio di caso di test è il seguente che verifica se pagina di dettaglio
 relativa a una farmacia è raggiungibile:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

class ViewTest(TestCase):
\end_layout

\begin_layout Plain Layout

	def test_pharmacies_detail(self):         
\end_layout

\begin_layout Plain Layout

		user = User.objects.create(username='TestUser')         
\end_layout

\begin_layout Plain Layout

		farmacia = Pharmacy.objects.create(owner=user, name="Farmacia", image="farmacia.p
ng", x=50, y=50,                                            slot4hMinWeek=5,
 location="Bergamo", description="Text")         
\end_layout

\begin_layout Plain Layout

		url = reverse('shop:pharmacies_detail', args=(farmacia.id,))         
\end_layout

\begin_layout Plain Layout

		resp = self.client.get(url)
\end_layout

\begin_layout Plain Layout

		self.assertEqual(resp.status_code, 200)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In totale sono stati creati 17 metodi per testare varie funzionalità offerte
 dall'applicazione a livello di views.
\end_layout

\begin_layout Standard
Nella figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "Tests"
plural "false"
caps "false"
noprefix "false"

\end_inset

 è riportato l'output di alcuni test eseguiti con 
\emph on
unittest
\emph default
; sono anche compresi i test effettuati sui due algoritmi.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename screenshot/Test.png
	lyxscale 75
	scale 250

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset CommandInset label
LatexCommand label
name "Tests"

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Tests
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Molti di questi test hanno permesso di individuare falle sia per quanto
 riguarda la compilazione di form, sia per eventuali funzioni che non facevano
 il loro dovere.
\end_layout

\begin_layout Standard
TODO (Immagine aggiornata)
\end_layout

\begin_layout Section
Test parametrici
\end_layout

\begin_layout Standard
I test parametrici sono test in cui è possibile passare dei parametri come
 dati di ingresso al test; in questo progetto è stato usato il package 
\emph on
parameterized
\emph default
 per 
\emph on
unittest
\emph default
.
 Di seguito è mostrato un esempio di test parametrico inerente alla compilazione
 dei form in cui vengono passati i valori dei vari campi e il risultato
 atteso indicante se il form sia valido o meno.
 In particolare sul 
\emph on
ContactForm
\emph default
 sono stati effettuati controlli sulla digitazione corretta dell'indirizzo
 email passandogli stringhe senza la chiocciola o senza il punto del dominio.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

@parameterized_class(('name', 'email', 'subject', 'message', 'expected_result'),
 [
\end_layout

\begin_layout Plain Layout

    ("Test", "test@email.com", "Text", "Text", True),
\end_layout

\begin_layout Plain Layout

    ("Test", "without.at", "Text", "Text", False),
\end_layout

\begin_layout Plain Layout

    ("Test", "without@domain", "Text", "Text", False),
\end_layout

\begin_layout Plain Layout

])
\end_layout

\begin_layout Plain Layout

class ContactFormTestParametrized(TestCase):     
\end_layout

\begin_layout Plain Layout

	def test_form(self):         
\end_layout

\begin_layout Plain Layout

		data = {'name': self.name, 'email': self.email, 'subject': self.subject,
 'message': self.message}         
\end_layout

\begin_layout Plain Layout

		form = ContactForm(data=data)         
\end_layout

\begin_layout Plain Layout

		self.assertEqual(form.is_valid(), self.expected_result)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Attraverso questi test sono stati individuati degli errori anche negli altri
 form, tra cui
\end_layout

\begin_layout Standard
- Venivano accettate le mail senza la chiocciola.
\end_layout

\begin_layout Standard
- Venivano accettati i numeri di telefono composti da lettere.
\end_layout

\begin_layout Standard
- Venivano accettate stringhe vuote nei vari campi.
\end_layout

\begin_layout Standard
Tutti questi errori sono stati corretti attraverso l'insermiento degli 
\emph on
asserts
\emph default
 durante la creazione dei form (vedi sezione 
\emph on
assert
\emph default
s).
\end_layout

\begin_layout Section
Criteri di copertura
\end_layout

\begin_layout Standard
In questa sezione verifichiamo la copertura del codice, ossia quanta porzione
 del codice è coperta dai test implementati.
\end_layout

\begin_layout Standard

\emph on
Coverage.py
\emph default
 è uno strumento per misurare la copertura del codice Python.
 È disponibile anche visualizzare l'output in HTML o in XML con le relative
 percentuali di copertura del codice.
\end_layout

\begin_layout Standard
Questi sono i comandi necessari per l'utilizzo:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ coverage run manage.py test -v 2
\end_layout

\begin_layout Plain Layout

$ coverage html
\end_layout

\begin_layout Plain Layout

$ coverage xml
\end_layout

\begin_layout Plain Layout

$ coverage erase # Delete previous coverage
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Nella figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "Coverage"
plural "false"
caps "false"
noprefix "false"

\end_inset

 è riportato l'output in formato HTML della copertura del codice
\begin_inset Foot
status open

\begin_layout Plain Layout
Sono rappresentate sono alcune linee della tabella, il report completo è
 disponibile nella percorso 
\emph on
/pharmacies/htmlcov
\end_layout

\end_inset

.
 Si può notare che i casi di test coprono 84% del codice realizzato.
\end_layout

\begin_layout Standard
TODO (Aggiornare immagini Prima-Dopo, Numero percentuale)
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename screenshot/Coverage.png
	lyxscale 75
	scale 250

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset CommandInset label
LatexCommand label
name "Coverage"

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Coverage
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Inoltre è stato usato 
\emph on
CodeCov
\emph default
, un sito interattivo per la gestione e la comparazione dei rapporti di
 copertura del codice creati automaticamente a ogni push da 
\emph on
GitHub Actions
\emph default
 (vedi sezione 
\emph on
Continuos Integration
\emph default
).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename screenshot/CodeCov.png
	lyxscale 75

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset CommandInset label
LatexCommand label
name "CodeCov"

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
CodeCov Coverage Sunbrust
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
TODO (Aggiornare immagini Prima-Dopo)
\end_layout

\begin_layout Section
Criteri MCDC o logici
\end_layout

\begin_layout Standard
TODO (Modified Condition/Decision Coverage di tipo statement?)
\end_layout

\begin_layout Standard
TODO
\end_layout

\begin_layout Section
Criteri di tipo Dataflow, Loop, Random
\end_layout

\begin_layout Standard
TODO (Dataflow sono i flow chart degli algoritmi?)
\end_layout

\begin_layout Standard
TODO (Loop)
\end_layout

\begin_layout Standard
TODO (Random)
\end_layout

\begin_layout Standard
TODO
\end_layout

\begin_layout Section
Continuous Integration
\end_layout

\begin_layout Standard
Nello sviluppo di questo progetto è stata usata la Continuous Integration
 offerta da
\emph on
 GitHub Actions 
\emph default
e integrata nel repository del progetto.
 Risulta molto comoda in quanto basta configurare al meglio il file 
\emph on
.github/workflows/django.yml
\emph default
 (ad esempio) per indicare i comandi da eseguire.
 A ogni push infatti vengono eseguiti numerosi test automaticamente che
 ci permettono di avere in tempo reale un indicatore se qualcosa è andato
 storto o meno dopo le ultime modifiche.
\end_layout

\begin_layout Standard
In particolare, dopo aver configurato la versione di Python e l'installazione
 dei requirements presenti nel file 
\emph on
requirements.txt 
\emph default
(sfruttando anche la cache), si procede in questo modo:
\end_layout

\begin_layout Standard
- Vengono eseguiti tutti i test implementati con unittest.
\end_layout

\begin_layout Standard
- Viene effettuato un report di copertura del codice e caricato automaticamente
 su CodeCov per un'analisi dettagliata.
\end_layout

\begin_layout Standard
TODO (Descrizione passaggi CI)
\end_layout

\begin_layout Standard
TODO (Analisi statica messa dopo)
\end_layout

\begin_layout Section
Capture and Replay
\end_layout

\begin_layout Standard

\emph on
Selenium
\emph default
 è un framework portatile per testare le applicazioni web e fornisce strumento
 di riproduzione
\emph on
.

\emph default
 In particolare simula l'interazione che l'utente fa con l'applicazione
 web attraverso, in questo caso, mouse e tastiera usando il browser 
\emph on
Firefox
\emph default
.
\end_layout

\begin_layout Standard
Un esempio che è stato fatto è quello della compilazione del form di contatto
 per la richiesta di supporto:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

class ContactViewSeleniumTest(LiveServerTestCase):
\end_layout

\begin_layout Plain Layout

    def setUp(self):         
\end_layout

\begin_layout Plain Layout

		self.driver = webdriver.Firefox()         
\end_layout

\begin_layout Plain Layout

		last_height = self.driver.execute_script("return document.body.scrollHeight")
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

	def test_selenium_contact(self):         
\end_layout

\begin_layout Plain Layout

		self.driver.get("http://localhost:8000/shop/contact")         
\end_layout

\begin_layout Plain Layout

		self.driver.find_element_by_id('id_name').send_keys("Gino")         
\end_layout

\begin_layout Plain Layout

		self.driver.find_element_by_id('id_email').send_keys("gino@mail.com")    
     		self.driver.find_element_by_id('id_subject').send_keys("Text")     
    
\end_layout

\begin_layout Plain Layout

		self.driver.find_element_by_id('id_message').send_keys("Text")         
\end_layout

\begin_layout Plain Layout

		self.driver.find_element_by_id('submit').click()  # Submit button       
  
\end_layout

\begin_layout Plain Layout

		self.assertIn("http://localhost:8000/shop/contact", self.driver.current_url)
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

	def tearDown(self):         
\end_layout

\begin_layout Plain Layout

		self.driver.quit
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Necessita che il server dell'applicazione sia in esecuzione su un altro
 terminale e la presenza di 
\emph on
geckodriver.exe
\emph default
 (vedi manuale utente).
\end_layout

\begin_layout Standard
TODO (Estendere)
\end_layout

\begin_layout Section
Mock
\end_layout

\begin_layout Standard
TODO (unittest.mock)
\end_layout

\begin_layout Chapter
Code Verification
\end_layout

\begin_layout Section
Assertions
\end_layout

\begin_layout Standard
Attraverso i test parametrici effettuati in precedenza sono state individuate
 delle casistiche che non dovrebbero esistere durante la compilazione dei
 form.
 Con l'introduzione degli 
\emph on
assert
\emph default
 durante la creazione del form si è potuto evitare tali situzioni.
 Inoltre anche all'interno dei test abbiamo usato gli assert per verificare
 che il risultato di un test sia identico a un valore aspettato.
\end_layout

\begin_layout Standard
TODO (Esempio form)
\end_layout

\begin_layout Standard
TODO (In qualche classe/funzione, non solo nei test)
\end_layout

\begin_layout Section
Design by Contract (JML*)
\end_layout

\begin_layout Standard
TODO (pact-test)
\end_layout

\begin_layout Section
Program Verification (KEYJML*)
\end_layout

\begin_layout Standard
TODO (?)
\end_layout

\begin_layout Section
Analisi statica
\end_layout

\begin_layout Subsection
Pylint
\end_layout

\begin_layout Standard
Il tool multifunzionale 
\emph on
pylint
\emph default
 è stato usato per l'analisti statica e comprende:
\end_layout

\begin_layout Standard
- 
\emph on
Coding standards
\emph default
: check sulla lunghezza delle linee di codice, check sui nomi delle variabili
 (notazioni), check sui moduli importati e usati.
\end_layout

\begin_layout Standard
- 
\emph on
Error detection
\emph default
: check sulle interfacce e la loro implementazione.
\end_layout

\begin_layout Standard
- 
\emph on
Refractoring
\emph default
: detection di codice duplicato.
\end_layout

\begin_layout Standard
- 
\emph on
UML diagrams
\emph default
: 
\emph on
Pylint
\emph default
 integra 
\emph on
Pyreverse
\emph default
 che permette l'esportazione automatica di diagrammi UML riguardanti le
 classi, i package e la struttura del database in formato 
\emph on
.dot
\emph default
 o 
\emph on
.png
\emph default
.
\end_layout

\begin_layout Standard
Grazie ai seguenti comandi è possibile installare pylint, successivamente
 fare una scansione automatica dell'apps shop scegliendo se farla completa,
 solo sugli errori evitando i warning oppure fare anche un test sulla performanc
e del database.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ pylint --rcfile=./.pylintrc  ./shop 
\end_layout

\begin_layout Plain Layout

$ pylint --rcfile=./.pylintrc --errors-only ./shop 
\end_layout

\begin_layout Plain Layout

$ pylint --rcfile=./.pylintrc --load-plugins pylint_django --load-plugins
 pylint_django.checkers.db_performance ./shop 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Grazie al file .
\emph on
pylintrc
\emph default
 è possibile personalizzare interamente i parametri della ricerca andando
 a settare le varie impostazioni al proprio interno; la configurazione si
 può trovare nel file .
\emph on
pylintrc
\emph default
 presente nella cartella base.
\end_layout

\begin_layout Standard
Nella figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "Output di pylint"
plural "false"
caps "false"
noprefix "false"

\end_inset

 è riportato l'output di pylint dove viene valutato il codice su una scala
 da 0 a 10.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename screenshot/Pylint.png
	lyxscale 75
	scale 75

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset CommandInset label
LatexCommand label
name "Output di pylint"

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Output di pylint
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
TODO (Ampliare, Prima-Dopo)
\end_layout

\begin_layout Standard
TODO (Deep Analysis, Qualità del codice, Convenzioni)
\end_layout

\begin_layout Subsection
Pyreverse e GraphViz
\end_layout

\begin_layout Standard
I tool 
\emph on
pyreverse
\emph default
 e 
\emph on
GraphViz
\emph default
 sono usati per esportare diagrammi UML riguardanti le class e i packages
 di ogni modulo.
 Inoltre è possibile esportare pure lo schema entità relazione del database.
\end_layout

\begin_layout Standard
Dopo aver installato 
\emph on
pyreverse
\emph default
 e 
\emph on
GraphViz
\emph default
 (necessita anche di aggiungere 
\emph on
bin
\backslash
gvedit.exe
\emph default
 nel path delle variabili d'ambiente) si possono usare con i seguenti comandi:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ pyreverse -o png -A -s 0 -a 0 -k authentication  shop timetable transfer
 --ignore=migrations,tests,tests.py
\end_layout

\begin_layout Plain Layout

$ pyreverse -o png -A -s 0 -a 0 -k  shop --ignore=migrations,tests,tests.py
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

$ python manage.py graph_models -a -o models.png 
\end_layout

\begin_layout Plain Layout

$ python manage.py graph_models authentication shop timetable transfer -o
 apps.png
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Nella figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "Classes"
plural "false"
caps "false"
noprefix "false"

\end_inset

 sono rappresentate le classi dell'intera applicazione:
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename img/Classes.png
	lyxscale 30
	scale 27.5
	rotateAngle 90

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset CommandInset label
LatexCommand label
name "Classes"

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Classes
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Nella figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "Packages"
plural "false"
caps "false"
noprefix "false"

\end_inset

 sono rappresentate le interazioni tra i vari package dell'applicazione.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename img/Packages.png
	lyxscale 30
	scale 30

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset CommandInset label
LatexCommand label
name "Packages"

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Packages
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Eliminazione/Giustifica Wall
\end_layout

\begin_layout Standard
TODO (?)
\end_layout

\begin_layout Section
Code Refractoring
\end_layout

\begin_layout Standard
TODO (Dimostra come hai dovuto refrattorizzare il codice (da struttura a
 renaming), Moving models)
\end_layout

\begin_layout Section
Integrazione con CI o con Unittest
\end_layout

\begin_layout Standard
In 
\emph on
GitHub Actions
\emph default
 sono state integrate gran parte delle verifiche sull'analisi statica, in
 particolare:
\end_layout

\begin_layout Standard
- Analisi del codice con 
\emph on
pylint
\emph default
.
\end_layout

\begin_layout Standard
TODO (Lista)
\end_layout

\begin_layout Section
Code Inspection
\end_layout

\begin_layout Standard
TODO (Checklist a mano su un modulo)
\end_layout

\begin_layout Chapter
Model Verification
\end_layout

\begin_layout Standard
TODO
\end_layout

\begin_layout Chapter
Model Based Testing
\end_layout

\begin_layout Standard
TODO
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\end_body
\end_document
