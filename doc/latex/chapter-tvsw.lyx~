#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass scrbook
\begin_preamble
% in case somebody want to have the label "Equation"
%\renewcommand{\eqref}[1]{Equation~(\negthinspace\autoref{#1})}

% that links to image floats jumps to the beginning
% of the float and not to its caption
\usepackage[figure]{hypcap}

% the pages of the TOC is numbered roman
% and a pdf-bookmark for the TOC is added
\let\myTOC\tableofcontents
\renewcommand\tableofcontents{%
  \frontmatter
  \pdfbookmark[1]{\contentsname}{}
  \myTOC
  \mainmatter }

% makes caption labels bold
% for more info about these settings, see
% https://ctan.org/tex-archive/macros/latex/contrib/koma-script/doc/scrguien.pdf
\setkomafont{captionlabel}{\bfseries}
\setcapindent{1em}

% enables calculations
\usepackage{calc}

% fancy page header/footer settings
% for more information see section 9 of
% ftp://www.ctan.org/pub/tex-archive/macros/latex2e/contrib/fancyhdr/fancyhdr.pdf
\renewcommand{\chaptermark}[1]{\markboth{#1}{#1}}
\renewcommand{\sectionmark}[1]{\markright{\thesection\ #1}}

% increases the bottom float placement fraction
\renewcommand{\bottomfraction}{0.5}

% avoids that floats are placed above its sections
\let\mySection\section\renewcommand{\section}{\suppressfloats[t]\mySection}

% increases link area for cross-references and autoname them
% if you change the document language to e.g. French
% you must change "extrasenglish" to "extrasfrench"
% if you uncomment the following lines, you cannot use the reference version Ref+Text in LyX
%\AtBeginDocument{%
% \renewcommand{\ref}[1]{\autoref{#1}}
%}
%\def\refnamechanges{%
% \renewcommand*{\equationautorefname}[1]{}
% \renewcommand{\sectionautorefname}{sec.\negthinspace}
% \renewcommand{\subsectionautorefname}{sec.\negthinspace}
% \renewcommand{\subsubsectionautorefname}{sec.\negthinspace}
% \renewcommand{\figureautorefname}{Fig.\negthinspace}
% \renewcommand{\tableautorefname}{Tab.\negthinspace}
%}
%\@ifpackageloaded{babel}{\addto\extrasenglish{\refnamechanges}}{\refnamechanges}
\end_preamble
\options intoc,bibliography=totoc,index=totoc,BCOR10mm,captions=tableheading,titlepage
\use_default_options true
\master project.lyx
\begin_modules
customHeadersFooters
\end_modules
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "lmodern" "default"
\font_sans "lmss" "default"
\font_typewriter "lmtt" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures false
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command bibtex
\index_command default
\float_placement H
\paperfontsize 12
\spacing single
\use_hyperref true
\pdf_title "Your title"
\pdf_author "Your name"
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle false
\pdf_quoted_options "pdfpagelayout=OneColumn, pdfnewwindow=true, pdfstartview=XYZ, plainpages=false"
\papersize a4paper
\use_geometry false
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\branch Standalone
\selected 1
\filename_suffix 0
\color #ff0000
\end_branch
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 2
\paragraph_separation skip
\defskip medskip
\is_math_indent 1
\math_indentation default
\math_numbering_side default
\quotes_style french
\dynamic_quotes 0
\papercolumns 1
\papersides 2
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Left Header
\begin_inset Argument 1
status open

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
chaptername
\end_layout

\end_inset


\begin_inset space ~
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
thechapter
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
rightmark
\end_layout

\end_inset


\end_layout

\begin_layout Right Header
\begin_inset Argument 1
status open

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
leftmark
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Left Footer
\begin_inset Argument 1
status open

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
thepage
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Center Footer

\end_layout

\begin_layout Right Footer
\begin_inset Argument 1
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
thepage
\end_layout

\end_inset


\end_layout

\begin_layout Part
Testing e verifica del software
\end_layout

\begin_layout Chapter
Code Testing
\end_layout

\begin_layout Standard
La parte di testing sugli algoritmi è presente alla fine della 
\emph on
Fase III
\emph default
 per l'algoritmo 
\emph on
timetable
\emph default
 e alla fine della 
\emph on
Fase IV
\emph default
 per l'algoritmo 
\emph on
transfer
\emph default
.
\end_layout

\begin_layout Standard
TODO (Algoritmi)
\end_layout

\begin_layout Section

\series bold
Test
\series default
 (unittest)
\end_layout

\begin_layout Standard
In questa sezione ci si concentrerà sulla creazione e l'implementazione
 di numerosi test sulle varie componenti dell'applicazione con particolare
 attenzione ai models, ai forms e alle views.
\end_layout

\begin_layout Standard
Per effettuare i test useremo 
\emph on
unittest
\emph default
, un framework per il testing ispirato a 
\emph on
JUnit
\emph default
.
 In particolar modo, nel file
\emph on
 settings.py
\emph default
 dell'applicazione è stata definita la creazione automatica di un database
 di prova 
\emph on
testdatabase
\emph default
 in modo da non avere ripercussioni sul database reale: ad ogni sessione
 di test verrà creato da zero un database sulla base dei models definiti
 e verrà distrutto al termine dei test.
\end_layout

\begin_layout Subsection
Models tests
\end_layout

\begin_layout Standard
Sono stati eseguiti numerosi test sulla creazione di ogni modello presente
 nelle varie componenti dell'applicazione.
\end_layout

\begin_layout Standard
Un esempio di caso di test è il seguente per la creazione di una farmacia:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

class PharmacyModelTest(TestCase):
\end_layout

\begin_layout Plain Layout

	def create_pharmacy(self, name="Farmacia", image="farmacia.png", x=50, y=0,
 slot4hMinWeek=5, location="Bergamo",             description="Text"):
\end_layout

\begin_layout Plain Layout

		user = User.objects.create(username='TestUser')
\end_layout

\begin_layout Plain Layout

		return Pharmacy.objects.create(owner=user, name=name, image=image, x=x,
 y=y, slot4hMinWeek=slot4hMinWeek, location=location, description=description)
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

	def test_pharmacy_creation(self):
\end_layout

\begin_layout Plain Layout

		w = self.create_pharmacy()
\end_layout

\begin_layout Plain Layout

		self.assertTrue(isinstance(w, Pharmacy)
\end_layout

\begin_layout Plain Layout

		fields = w.id, w.owner, w.name
\end_layout

\begin_layout Plain Layout

		self.assertEqual(w.__unicode__(), fields)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Un altro esempio di caso di test riguardante la creazione di un prodotto:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

class ProductModelTest(TestCase):
\end_layout

\begin_layout Plain Layout

	def create_product(self, name="Oki", image="pharmacy.png", description="Text",
 brand="Brand", quantity=30, price=20,                        shipping_fee=10):
\end_layout

\begin_layout Plain Layout

		user = User.objects.create(username='TestUser')
\end_layout

\begin_layout Plain Layout

		farmacia = Pharmacy.objects.create(owner=user, name="Farmacia", image="farmacia.p
ng", x=50, y=50, slot4hMinWeek=5, location="Bergamo", description="Text")
\end_layout

\begin_layout Plain Layout

		categoria = Category.objects.create(name="Antinfiammatorio", description="Text",
 slug=slugify("Antinfiammatorio").__str__())
\end_layout

\begin_layout Plain Layout

		return Product.objects.create(name=name, category=categoria, pharmacy=farmacia,
 image=image, description=description, brand=brand, quantity=quantity, price=pri
ce, shipping_fee=shipping_fee, slug=slugify(1).__str__())
\end_layout

\begin_layout Plain Layout

	    
\end_layout

\begin_layout Plain Layout

	def test_product_creation(self):
\end_layout

\begin_layout Plain Layout

		w = self.create_product()
\end_layout

\begin_layout Plain Layout

		self.assertTrue(isinstance(w, Product))
\end_layout

\begin_layout Plain Layout

		fields = w.id, w.name, w.description
\end_layout

\begin_layout Plain Layout

		self.assertEqual(w.__unicode__(), fields)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In totale sono state create 12 classi per testare i models (compresa la
 funzione 
\emph on
__str__
\emph default
), ognuna con i rispettivi metodi e parametri per verificare la corretta
 istanziazione di un modello nel database.
\end_layout

\begin_layout Subsection
Forms tests
\end_layout

\begin_layout Standard
Sono stati eseguiti numerosi test sulla compilazione di ogni form presente
 nelle varie componenti dell'applicazione.
\end_layout

\begin_layout Standard
Un esempio di caso di test è il seguente per la compilazione del 
\emph on
ContactForm
\emph default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

class ContactFormTest(TestCase):
\end_layout

\begin_layout Plain Layout

	def test_valid_form(self):
\end_layout

\begin_layout Plain Layout

		data = {'name': "Test", 'email': "test@mail.com", 'subject': "Text", 'message':
 "Text"}
\end_layout

\begin_layout Plain Layout

		form = ContactForm(data=data)
\end_layout

\begin_layout Plain Layout

		self.assertTrue(form.is_valid())
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def test_invalid_form(self):
\end_layout

\begin_layout Plain Layout

		data = {'name': "Test", 'email': "testmail.com", 'subject': "Text", 'message':
 "Text"}
\end_layout

\begin_layout Plain Layout

		form = ContactForm(data=data)
\end_layout

\begin_layout Plain Layout

		self.assertFalse(form.is_valid())
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In totale sono state create 15 classi per testare i forms (anche parametrici),
 ognuna con i rispettivi metodi per verificare la corretta compilazione
 dei campi e l'invio del form.
 In particolare, un metodo testa un caso positivo in cui sono passati correttame
nte tutti i parametri necessari, e un altro metodo testa un caso negativo
 in cui si testa il rifuto dell'invio del form dovuto alla mancanza di campi
 da compilare oppure a parametri passati non correttamente.
\end_layout

\begin_layout Standard
È stata fatta successivamente anche una versione parametrizzata (vedi sezione
 
\emph on
Test parametrici
\emph default
) molto più completa.
\end_layout

\begin_layout Subsection
Views tests
\end_layout

\begin_layout Standard
Sono stati eseguiti numerosi test sulle varie funzioni dell'applicazione.
\end_layout

\begin_layout Standard
Un esempio di caso di test è il seguente che verifica se la pagina di dettaglio
 relativa a una farmacia è raggiungibile:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

class ViewTest(TestCase):
\end_layout

\begin_layout Plain Layout

	def test_pharmacies_detail(self):
\end_layout

\begin_layout Plain Layout

		user = User.objects.create(username='TestUser')
\end_layout

\begin_layout Plain Layout

		farmacia = Pharmacy.objects.create(owner=user, name="Farmacia", image="farmacia.p
ng", x=50, y=50,                                            slot4hMinWeek=5,
 location="Bergamo", description="Text")
\end_layout

\begin_layout Plain Layout

		url = reverse('shop:pharmacies_detail', args=(farmacia.id,))
\end_layout

\begin_layout Plain Layout

		resp = self.client.get(url)
\end_layout

\begin_layout Plain Layout

		self.assertEqual(resp.status_code, 200)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Un altro esempio riguardante l'aggiunta di un prodotto al carrello:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

class ViewTest(TestCase):
\end_layout

\begin_layout Plain Layout

    def test_add_cart(self):
\end_layout

\begin_layout Plain Layout

		user = User.objects.create(username='TestUser')
\end_layout

\begin_layout Plain Layout

		farmacia = Pharmacy.objects.create(owner=user, name="Farmacia", image="farmacia.p
ng", x=50, y=50, slot4hMinWeek=5, location="Bergamo", description="Text")
\end_layout

\begin_layout Plain Layout

		categoria = Category.objects.create(name="Antinfiammatorio", description="Text",
 slug=slugify("Antinfiammatorio").__str__())
\end_layout

\begin_layout Plain Layout

		prodotto = Product.objects.create(name="Tachipirina", category=categoria,
 pharmacy=farmacia, image="image.png",                                  
      		description="Text", brand="Brand", quantity=10, price=2, shipping_fee=1,
 slug=slugify(1).__str__())
\end_layout

\begin_layout Plain Layout

		url = reverse('shop:add_cart', args=(prodotto.slug,))
\end_layout

\begin_layout Plain Layout

		resp = self.client.get(url)
\end_layout

\begin_layout Plain Layout

		self.assertEqual(resp.status_code, 302)  # Redirect
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In totale sono stati creati 26 casi di test per le varie funzionalità offerte
 dall'applicazione a livello di views, in aggiunta a 3 test speciali sul
 pagamento e l'upload dell'immagine dei prodotti usando i mock (vedi sezione
 
\emph on
Mock
\emph default
).
\end_layout

\begin_layout Standard
Nella figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "Tests"
plural "false"
caps "false"
noprefix "false"

\end_inset

 è riportato l'output dei test eseguiti con 
\emph on
unittest
\emph default
; sono anche compresi i test effettuati sui due algoritmi (3 + 8 casi di
 test) e sui permessi (10 casi di test usando mock).
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename screenshot/Tests.png
	lyxscale 75
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset CommandInset label
LatexCommand label
name "Tests"

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Tests
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Molti di questi test hanno permesso di individuare falle sia per quanto
 riguarda la compilazione di form, sia per eventuali funzioni che non facevano
 correttamente il loro dovere.
\end_layout

\begin_layout Section
Test parametrici
\end_layout

\begin_layout Standard
Nei test parametrici è possibile passare dei parametri come dati di ingresso
 al test; in questo progetto è stato usato il package 
\emph on
parameterized
\emph default
 per 
\emph on
unittest
\emph default
.
 Di seguito sono mostrati degli esempi di test parametrici inerenti alla
 compilazione dei form in cui vengono passati i valori dei vari campi da
 compilare e il risultato atteso (booleano) indicante se il form sia valido
 o meno.
 In particolare sul 
\emph on
ContactForm
\emph default
 sono stati effettuati controlli sulla digitazione corretta dell'indirizzo
 email passandogli stringhe senza la chiocciola o senza il punto del dominio.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

@parameterized_class(('name', 'email', 'subject', 'message', 'expected_result'),
 [
\end_layout

\begin_layout Plain Layout

    ("Test", "test@email.com", "Text", "Text", True),
\end_layout

\begin_layout Plain Layout

    ("Test", "without.at", "Text", "Text", False),
\end_layout

\begin_layout Plain Layout

    ("Test", "without@domain", "Text", "Text", False),
\end_layout

\begin_layout Plain Layout

    ("", "test@email.com", "Text", "Text", False),
\end_layout

\begin_layout Plain Layout

])
\end_layout

\begin_layout Plain Layout

class ContactFormTestParametrized(TestCase):
\end_layout

\begin_layout Plain Layout

	def test_form(self):
\end_layout

\begin_layout Plain Layout

		data = {'name': self.name, 'email': self.email, 'subject': self.subject,
 'message': self.message}
\end_layout

\begin_layout Plain Layout

		form = ContactForm(data=data)
\end_layout

\begin_layout Plain Layout

		self.assertEqual(form.is_valid(), self.expected_result)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Un altro esempio riguardante il 
\emph on
BuyerForm
\emph default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

@parameterized_class(('full_name', 'phone', 'city', 'address', 'expected_result'
), [
\end_layout

\begin_layout Plain Layout

    ("Test", 123, "Bergamo", "Text", True),
\end_layout

\begin_layout Plain Layout

    ("Test", 123, "CityNotInChoices", "Text", False),
\end_layout

\begin_layout Plain Layout

    ("Test", True, "Text", "Text", False),
\end_layout

\begin_layout Plain Layout

])
\end_layout

\begin_layout Plain Layout

class BuyerDeliveryFormTest(TestCase):
\end_layout

\begin_layout Plain Layout

	def test_form(self):
\end_layout

\begin_layout Plain Layout

		data = {'full_name': self.full_name, 'phone': self.phone, 'city': self.city,
 'address': self.address}
\end_layout

\begin_layout Plain Layout

		form = BuyerDeliveryForm(data=data)
\end_layout

\begin_layout Plain Layout

		self.assertEqual(form.is_valid(), self.expected_result)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Attraverso questi test sono stati individuati delle falle anche negli altri
 form, tra cui:
\end_layout

\begin_layout Itemize
Venivano accettate le mail senza la chiocciola.
\end_layout

\begin_layout Itemize
Venivano accettati i numeri di telefono composti da lettere.
\end_layout

\begin_layout Itemize
Venivano accettate stringhe vuote nei vari campi.
\end_layout

\begin_layout Itemize
Venivano accettate stringhe troppo lunghe rispetto al vincolo sulla lunghezza
 presente nei models.
\end_layout

\begin_layout Itemize
Venivano accettate città al di fuori di una lista presente nel file 
\emph on
choices.py.
\end_layout

\begin_layout Standard
Tutti questi errori sono stati corretti attraverso l'inserimento degli asserts
 (vedi sezione 
\emph on
Assertions
\emph default
) oppure modificando i vincoli dei models.
\end_layout

\begin_layout Standard
TODO (Estendere)
\end_layout

\begin_layout Section
Criteri di copertura
\end_layout

\begin_layout Standard
In questa sezione verifichiamo la copertura del codice, ossia quanta porzione
 del codice è coperta dai test implementati.
\end_layout

\begin_layout Standard
Il pacchetto 
\emph on
coverage
\emph default
 è molto utile per misurare la copertura del codice Python.
 È possibile anche visualizzare l'output in HTML o in XML con le relative
 percentuali di copertura del codice.
\end_layout

\begin_layout Standard
Questi sono i comandi necessari per l'utilizzo:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ coverage run manage.py test -v 2
\end_layout

\begin_layout Plain Layout

$ coverage report
\end_layout

\begin_layout Plain Layout

$ coverage html
\end_layout

\begin_layout Plain Layout

$ coverage xml
\end_layout

\begin_layout Plain Layout

$ coverage erase
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In una prima stesura di test si era raggiunto il 49% di copertura del codice.
 In figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "Coverage-Vecchio"
plural "false"
caps "false"
noprefix "false"

\end_inset

 sono rappresentati le parti meno coperte.
 La parte di autenticazione era stata in gran parte trascurata, così come
 non erano state coperte tutte le funzioni presente nei vari file 
\emph on
views.py
\emph default
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename screenshot/Coverage (Vecchio).png
	lyxscale 75
	scale 75

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset CommandInset label
LatexCommand label
name "Coverage-Vecchio"

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Coverage precedente
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Usando i report si è potuto indagare i moduli scoperti e si è proceduto
 a implementare ulteriori casi di test fino a raggiungere il 90% di copertura
 del codice.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename screenshot/Coverage.png
	lyxscale 75
	scale 35

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset CommandInset label
LatexCommand label
name "Coverage"

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Coverage finale
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Inoltre è stato usato 
\emph on
Codecov
\emph default
, un sito interattivo per la gestione e la comparazione dei rapporti di
 copertura del codice creati e caricati automaticamente ad ogni push grazie
 a 
\emph on
GitHub Actions
\emph default
 (vedi sezione 
\emph on
Continuos Integration
\emph default
).
 Grazie a questo strumento è possibile interagire con i report di copertura
 e analizzarli nel dettaglio.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename screenshot/Codecov.png
	lyxscale 75
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset CommandInset label
LatexCommand label
name "Codecov"

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Codecov
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Nell'immagine 
\begin_inset CommandInset ref
LatexCommand ref
reference "Codecov Sunbrust"
plural "false"
caps "false"
noprefix "false"

\end_inset

 sono rappresentati i vari moduli dell'applicazione (settori del grafico)
 colorati usando una sfumatura che parte dal rosso (copertura insufficiente)
 fino al verde (copertura massima): quello a sinistra era in una fase intermedia
 del processo di testing, quello a destra in una fase finale.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename screenshot/CodeCov Sunbrust.png
	lyxscale 75
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset CommandInset label
LatexCommand label
name "Codecov Sunbrust"

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Codecov Sunbrust
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
TODO (Codeclimate, Codacy)
\end_layout

\begin_layout Section
Criteri avanzati di copertura
\end_layout

\begin_layout Subsection
Mutation Testing
\end_layout

\begin_layout Standard
Il 
\emph on
mutation testing
\emph default
 valuta la qualità dei test modificando il codice sorgente di un programma
 in piccole parti.
 Una test suit che non rileva e rifiuta il codice mutato è considerata difettosa.
 Queste mutazioni si basano su operatori di mutazione ben definiti che imitano
 i tipici errori di programmazione (come l'uso dell'operatore sbagliato
 o il nome della variabile) o costringono alla creazione di test significativi
 (come portare ogni espressione a zero).
 Lo scopo è aiutare lo sviluppatore a sviluppare test efficaci, a individuare
 punti deboli nel codice e a individuare sezioni in cui non si accede mai
 o solo raramente durante l'esecuzione.
\end_layout

\begin_layout Standard
È stato usato il pacchetto 
\emph on
django-mutpy
\emph default
 ottimizzato per Django e basato su 
\emph on
mutpy 
\emph default
eseguibile usando questo comando:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ python manage.py muttest shop
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Una lista degli operatori di mutazione di 
\emph on
mutpy
\emph default
: AOD (Arithmetic operator deletion), AOR (Arithmetic operator replacement),
 ASR (Assignment operator replacement), BCR (Break continue replacement),
 COD (Conditional operator deletion), COI (Conditional operator insertion),
 CRP (Constant replacement), DDL (Decorator deletion), EHD (Exception handler
 deletion), EXS (Exception swallowing), IHD (Hiding variable deletion),
 IOD (Overriding method deletion), IOP (Overridden method calling position
 change), LCR (Logical connector replacement), LOD (Logical operator deletion),
 LOR (Logical operator replacement), ROR (Relational operator replacement),
 SCD (Super calling deletion), SCI (Super calling insert), SIR (Slice index
 remove).
\end_layout

\begin_layout Standard
Il risultato finale dei test, dopo aver fatto varie iterazioni per migliorarlo,
 di mutazione è il seguente:
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename screenshot/MutPy.png
	lyxscale 75

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset CommandInset label
LatexCommand label
name "MutPy"

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
MutPy
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
TODO
\end_layout

\begin_layout Standard
TODO (MCDC, Logici, Dataflow, Loop, Random)
\end_layout

\begin_layout Section
Continuous Integration (CI)
\end_layout

\begin_layout Standard
Nello sviluppo di questo progetto è stata usata la continuous integration
 offerta da
\emph on
 GitHub Actions 
\emph default
e integrata nel repository del progetto stesso.
 Risulta molto comoda in quanto basta configurare al meglio il file 
\emph on
.github/workflows/django-testing.yml
\emph default
 (ad esempio per il testing) indicando i comandi da eseguire.
 Ad ogni push infatti vengono eseguiti numerosi test automaticamente che
 ci permettono di avere in tempo reale un indicatore se qualcosa è andato
 storto o meno dopo le ultime modifiche apportate al codice e caricate sul
 repository.
\end_layout

\begin_layout Standard
In particolare, la sequenza di passi che viene eseguita da 
\emph on
django-testing.yml
\emph default
 è la seguente:
\end_layout

\begin_layout Itemize
Viene configurato l'ambiente (
\emph on
Ubuntu
\emph default
) e installata la versione corretta di Python, in questo caso la 3.8.
\end_layout

\begin_layout Itemize
Vengono soddisfatte tutte le dipendenze installando i pacchetti indicati
 nel file 
\emph on
requirements.txt 
\emph default
(sfruttando anche la cache).
\end_layout

\begin_layout Itemize
Vengono fatte le migrazioni di Django.
\end_layout

\begin_layout Itemize
Vengono eseguiti tutti i test implementati con 
\emph on
unittest
\emph default
 e implicitamente verificati i contratti stabiliti con 
\emph on
icontract
\emph default
.
\end_layout

\begin_layout Itemize
Viene effettuato un report di copertura del codice attraverso 
\emph on
coverage 
\emph default
(in formato HTML e XML) e caricato automaticamente su 
\emph on
CodeCov
\emph default
 per un'analisi dettagliata e un confronto tra i vari reports precedenti.
\end_layout

\begin_layout Standard
Inoltre nel file 
\emph on
django-verification.yml
\emph default
 vi è la parte verifica del codice (vedi sezione (illustrata successivamente
 
\emph on
Integrazione con CI
\emph default
).
\end_layout

\begin_layout Section
Capture and Replay
\end_layout

\begin_layout Standard

\emph on
Selenium
\emph default
 è un framework portatile per testare le applicazioni web e fornisce uno
 strumento di riproduzione
\emph on
.

\emph default
 In particolare simula l'interazione che l'utente fa con l'applicazione
 web attraverso, in questo caso, mouse e tastiera usando il browser 
\emph on
Firefox
\emph default
.
\end_layout

\begin_layout Standard
Un esempio è quello della compilazione del form di contatto per la richiesta
 di supporto:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

class ContactViewSeleniumTest(LiveServerTestCase):
\end_layout

\begin_layout Plain Layout

    def setUp(self):
\end_layout

\begin_layout Plain Layout

		self.driver = webdriver.Firefox()
\end_layout

\begin_layout Plain Layout

		last_height = self.driver.execute_script("return document.body.scrollHeight")
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	def test_selenium_contact(self):
\end_layout

\begin_layout Plain Layout

		self.driver.get("http://localhost:8000/shop/contact")
\end_layout

\begin_layout Plain Layout

		self.driver.find_element_by_id('id_name').send_keys("Gino")
\end_layout

\begin_layout Plain Layout

		self.driver.find_element_by_id('id_email').send_keys("gino@mail.com")    
     		self.driver.find_element_by_id('id_subject').send_keys("Text")
\end_layout

\begin_layout Plain Layout

		self.driver.find_element_by_id('id_message').send_keys("Text")
\end_layout

\begin_layout Plain Layout

		self.driver.find_element_by_id('submit').click()  # Submit button
\end_layout

\begin_layout Plain Layout

		self.assertIn("http://localhost:8000/shop/contact", self.driver.current_url)
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

	def tearDown(self):
\end_layout

\begin_layout Plain Layout

		self.driver.quit
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Necessita che il server dell'applicazione sia in esecuzione in locale su
 un altro terminale e la presenza di 
\emph on
geckodriver.exe
\emph default
 (vedi 
\emph on
Manuale utente
\emph default
).
\end_layout

\begin_layout Standard
TODO (Estendere)
\end_layout

\begin_layout Section
Mock
\end_layout

\begin_layout Standard
È stato usato 
\emph on
unittest.mock
\emph default
, una libreria per il testing in Python che permette di sostituire parti
 del sistema con oggetti mock e fare assertions sul loro funzionamento.
 Il decoratore di 
\emph on
patch()
\emph default
 semplifica il testing rendendo mock classi o oggetti specificati.
 L'oggetto verrà sostituito con un oggetto fittizzio durante il test e ripristin
ato al termine del test.
\end_layout

\begin_layout Standard
Nel seguente esempio viene illustrato l'utilizzo del decoratore 
\emph on
patch()
\emph default
 per sostituire la funzione 
\emph on
calculate_amount()
\emph default
 con una fittizia che restituisce un determinato valore.
 Nel primo caso si testa il pagamentro tramite carta in cui si ha abbastanza
 credito per portare a termine la transazione, viceversa nel secondo caso.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

class PaymentTestCase(unittest.TestCase):
\end_layout

\begin_layout Plain Layout

    @mock.patch('shop.views.calculate_amount', autospec=True)
\end_layout

\begin_layout Plain Layout

	def test_process_cc_with_credit(self, mock_calculate_amount):
\end_layout

\begin_layout Plain Layout

		cc = FakeCreditCard(50)
\end_layout

\begin_layout Plain Layout

		mock_calculate_amount.return_value = 25
\end_layout

\begin_layout Plain Layout

		payment = Payment(1, cc)
\end_layout

\begin_layout Plain Layout

		status = payment.process(self)
\end_layout

\begin_layout Plain Layout

		self.assertEqual(status, 'processed')
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

	@mock.patch('shop.views.calculate_amount', autospec=True)
\end_layout

\begin_layout Plain Layout

	def test_process_cc_without_credit(self, mock_calculate_amount):
\end_layout

\begin_layout Plain Layout

		cc = FakeCreditCard(50)
\end_layout

\begin_layout Plain Layout

		mock_calculate_amount.return_value = 200
\end_layout

\begin_layout Plain Layout

		payment = Payment(1, cc)
\end_layout

\begin_layout Plain Layout

		status = payment.process(self)
\end_layout

\begin_layout Plain Layout

		self.assertEqual(status, 'cancelled')
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Usando 
\emph on
MagicMock
\emph default
, una sottoclasse di 
\emph on
Mock
\emph default
 con tutti i metodi magici precedentemente creati e pronti all'uso, si è
 creato un oggetto di tipo file (
\emph on
spec=File
\emph default
) usato come parametro durante la creazione di un prodotto nel database.
 In particolare quest'oggetto fittizio va a simulare un'immagine in formato
 
\emph on
.png
\emph default
 del prodotto.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

class PharmacyModelTestMockFile(TestCase):
\end_layout

\begin_layout Plain Layout

    def create_pharmacy_image(self, image, name="Farmacia", x=50, y=0, slot4hMin
Week=5, location="Bergamo", description="Text"):         
\end_layout

\begin_layout Plain Layout

		user = User.objects.create(username='TestUser')
\end_layout

\begin_layout Plain Layout

		file_mock = mock.MagicMock(spec=File)
\end_layout

\begin_layout Plain Layout

		file_mock.name = image
\end_layout

\begin_layout Plain Layout

		return Pharmacy(owner=user, name=name, image=file_mock, x=x, y=y, slot4hMinWee
k=slot4hMinWeek, location=location, description=description)
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

	def test_pharmacy_creation_image(self):
\end_layout

\begin_layout Plain Layout

		w = self.create_pharmacy_image("image.png")
\end_layout

\begin_layout Plain Layout

		self.assertTrue(isinstance(w, Pharmacy))
\end_layout

\begin_layout Plain Layout

		fields = w.id, w.owner, w.name
\end_layout

\begin_layout Plain Layout

		self.assertEqual(w.__unicode__(), fields)
\end_layout

\begin_layout Plain Layout

		self.assertEqual(w.image.name, "image.png")
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Inoltre 
\emph on
MagicMock
\emph default
 è stato impiegato anche nel testare i permessi dei vari utenti presenti
 nel 
\emph on
permission.py
\emph default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

class TestPermissions(TestCase):
\end_layout

\begin_layout Plain Layout

    def test_permissions_IsAdmin_true(self):
\end_layout

\begin_layout Plain Layout

		self.request = MagicMock(user=MagicMock())
\end_layout

\begin_layout Plain Layout

		self.request.user.is_superuser = True
\end_layout

\begin_layout Plain Layout

		self.view = MagicMock()
\end_layout

\begin_layout Plain Layout

		self.assertTrue(IsAdmin.has_permission(self, self.request, self.view))
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

	def test_permissions_IsAdmin_false(self):
\end_layout

\begin_layout Plain Layout

		self.request = MagicMock(user=MagicMock())
\end_layout

\begin_layout Plain Layout

		self.request.user.is_superuser = False
\end_layout

\begin_layout Plain Layout

		self.view = MagicMock()
\end_layout

\begin_layout Plain Layout

		self.assertFalse(IsAdmin.has_permission(self, self.request, self.view))
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Code Verification
\end_layout

\begin_layout Standard
TODO (Descrizione)
\end_layout

\begin_layout Section
Assertions
\end_layout

\begin_layout Standard
Gli 
\emph on
asserts
\emph default
 devono essere usati per testare condizioni che non dovrebbero mai accadere
 con lo scopo di inviare un segnale di errore e arrestarsi in anticipo sollevand
o un'eccezione nel caso di funzionamento non corretto.
 Quini gli asserts servono per trovare bug facilmente e velocemente.
\end_layout

\begin_layout Standard
Come si possono usare gli asserts
\emph on
:
\end_layout

\begin_layout Itemize
Controllo di tipi di parametri, classi o valori.
\end_layout

\begin_layout Itemize
Verifica degli invarianti delle strutture dei dati.
\end_layout

\begin_layout Itemize
Verifica di situazioni 
\begin_inset Quotes fld
\end_inset

impossibili
\begin_inset Quotes frd
\end_inset

 (duplicati in un elenco, variabili di stato contraddittorie).
 
\end_layout

\begin_layout Itemize
Dopo aver chiamato una funzione, per assicurarsi che il valore di ritorno
 sia ragionevole.
\end_layout

\begin_layout Standard

\series bold
Nota:
\series default
 Non usare gli asserts per la convalida dei dati! Gli asserts possono essere
 disattivati globalmente nell'interprete Python, quindi non bisogna fare
 affidamento sugli asserts per la validazione dei dati.
\end_layout

\begin_layout Standard
Un esempio di utilizzo degli asserts riguardante la classe 
\emph on
Payment
\emph default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

class Payment():
\end_layout

\begin_layout Plain Layout

	def __init__(self, invoice_id, credit_card):
\end_layout

\begin_layout Plain Layout

		assert isinstance(credit_card, FakeCreditCard), "credit_card is not a
 FakeCreditCard instance"
\end_layout

\begin_layout Plain Layout

		self.credit_card = credit_card
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

	def process(self, request):
\end_layout

\begin_layout Plain Layout

		amount = calculate_amount()
\end_layout

\begin_layout Plain Layout

		assert amount >= 0, "amount should be positive"
\end_layout

\begin_layout Plain Layout

		if self.credit_card.has_enough_credit(amount):
\end_layout

\begin_layout Plain Layout

			self.credit_card.withdraw(amount)
\end_layout

\begin_layout Plain Layout

			self.status = 'processed'
\end_layout

\begin_layout Plain Layout

		else:
\end_layout

\begin_layout Plain Layout

			self.status = 'cancelled'
\end_layout

\begin_layout Plain Layout

        return self.status
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Si può notare che è stato usato un assert per verificare che la variabile
 
\emph on
credit_card
\emph default
 passata come argomento alla funzione sia effettivamente un'istanza della
 classe 
\emph on
FakeCreditCard
\emph default
.
 Poco più sotto si verifica che il quantitativo richiesto per il pagamento
 sia un valore positivo.
 In entrambi i casi, se l'assert non è verificato viene sollevata un'eccezione.
\end_layout

\begin_layout Standard
Inoltre anche all'interno dei test abbiamo usato gli assert per verificare
 che il risultato di un test sia identico a un valore atteso.
 Un esempio particolare è nell'ottavo test dell'algoritmo transfer in cui
 si verifica che venga lanciata un'eccezione causata da un numero di prodotti
 insufficiente per soddisfare la richiesta di trasferimento:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# views.py
\end_layout

\begin_layout Plain Layout

if (len(listaProducts) == 0):
\end_layout

\begin_layout Plain Layout

	raise Exception("Non ci sono abbastanza prodotti")
\end_layout

\begin_layout Plain Layout

	break;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# tests.py
\end_layout

\begin_layout Plain Layout

self.assertRaises(Exception)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
TODO (Estendere)
\end_layout

\begin_layout Section
Design by Contract
\end_layout

\begin_layout Standard
Per quanto converne il Design by Contract in Python vi è una specifica 
\emph on

\begin_inset Quotes fld
\end_inset

PEP 316 - Programming by Contract for Python
\begin_inset Quotes frd
\end_inset


\emph default
 ma con status 
\emph on
deferred
\emph default
; bisogna quindi fare affidamento su altri pacchetti come ad esempio 
\emph on
icontract.
\end_layout

\begin_layout Standard
Questo pacchetto fornisce due function decorators, 
\emph on
require
\emph default
 e 
\emph on
ensure
\emph default
 che richiedono e garantiscono rispettivamente le precondizioni e le postcondizi
oni.
 Inoltre, fornisce anche un class decorator, 
\emph on
invariant
\emph default
, per stabilire i class invariant.
\end_layout

\begin_layout Standard
Le precondizioni sono scritte con il decoratore 
\emph on
require
\emph default
 e in lambda vi sono i parametri passati alla funzione.
 Le postcondizioni sono scritte con il decoratore 
\emph on
ensure
\emph default
 e in lambda vi è perlomeno un paramentro 
\emph on
result
\emph default
, ossia il valore ritornato dalla funzione.
\end_layout

\begin_layout Standard

\series bold
Nota:
\series default
 Gli inviarianti si possono usare solo con le classi, quindi gran parte
 delle funzioni implementate non poteva avere gli invarianti; ogni inviariante
 richiede 
\emph on
self
\emph default
 come unico paramentro.
\end_layout

\begin_layout Standard
Di seguito un esempio di contratto della funzione 
\emph on
algorithm_transfer()
\emph default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

@icontract.require(lambda quantity: quantity > 0, "quantity must be positive")
\end_layout

\begin_layout Plain Layout

@icontract.require(lambda x: x >= 0 and x <= 100, "coordinate 0 <= x <= 100")
\end_layout

\begin_layout Plain Layout

@icontract.require(lambda y: y >= 0 and y <= 100, "coordinate 0 <= y <= 100")
\end_layout

\begin_layout Plain Layout

@icontract.require(lambda category: Product.objects.all().filter(category=category).c
ount() >= 1, "at least one product of that category is required")
\end_layout

\begin_layout Plain Layout

@icontract.ensure(lambda result: len(result[0]) == len(result[1]))
\end_layout

\begin_layout Plain Layout

@icontract.ensure(lambda result, quantity: sum(result[1]) == quantity)
\end_layout

\begin_layout Plain Layout

def algorithm_transfer(request, category: Category, quantity: int, x: int,
 y: int) -> list:
\end_layout

\begin_layout Plain Layout

	# Codice
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In questo esempio vengono verificati che i parametri passati siano corretti,
 ossia che 
\emph on
quantity
\emph default
 sia strettamente positiva e che le coordinate 
\emph on
x
\emph default
 e
\emph on
 y
\emph default
 siano comprese tra 0 e 100; inoltre viene anche verificato che esista un
 prodotto di quella categoria specifica all'interno del database.
 Alla fine dell'algoritmo si verifica che il risultato, composto da una
 lista di liste (la prima lista interna di ID delle farmacie, la seconda
 lista interna di quantità prelevata dalla determinata farmacia in quella
 posizione), abbia le due liste interne di uguale lunghezza e che la somma
 delle quantità prelevate dalle farmacie sia pari alla quantità richiesta
 per il trasferimento.
\end_layout

\begin_layout Standard
In modo simile è stato fatto un contratto alla funzione 
\emph on
findGreedy()
\emph default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

@icontract.require(lambda listaProducts: len(listaProducts) > 0, "listaProducts
 must not be empty")
\end_layout

\begin_layout Plain Layout

@icontract.require(lambda x: x >= 0 and x <= 100, "coordinate 0 <= x <= 100")
\end_layout

\begin_layout Plain Layout

@icontract.require(lambda y: y >= 0 and y <= 100, "coordinate 0 <= y <= 100")
\end_layout

\begin_layout Plain Layout

@icontract.ensure(lambda result: Pharmacy.objects.filter(id=result[0]).count()
 >= 1)
\end_layout

\begin_layout Plain Layout

@icontract.ensure(lambda result: result[1] >= 0)
\end_layout

\begin_layout Plain Layout

@icontract.ensure(lambda result: 0 <= result[2] <= 100)
\end_layout

\begin_layout Plain Layout

@icontract.ensure(lambda result: 0 <= result[3] <= 100)
\end_layout

\begin_layout Plain Layout

def findGreedy(listaProducts: list, x: int, y: int):
\end_layout

\begin_layout Plain Layout

	# Codice
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Il controllo di un inviariante è stato fatto ad esempio nella classe FakeCreditC
ard in cui il bilancio della carta non può mai essere negativo:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

@icontract.invariant(lambda self: self.balance >= 0, "balance must not be
 negative")
\end_layout

\begin_layout Plain Layout

class FakeCreditCard:
\end_layout

\begin_layout Plain Layout

	def __init__(self, balance=50):
\end_layout

\begin_layout Plain Layout

		assert balance >= 0, "balance should not be negative"
\end_layout

\begin_layout Plain Layout

		self.balance = balance
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	def has_enough_credit(self, amount):
\end_layout

\begin_layout Plain Layout

		return self.balance > amount
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	def withdraw(self, amount):
\end_layout

\begin_layout Plain Layout

		self.balance = self.balance - amount
\end_layout

\begin_layout Plain Layout

		assert self.balance >= 0, "balance should not be negative"
\end_layout

\end_inset


\end_layout

\begin_layout Standard
TODO (Estendere)
\end_layout

\begin_layout Section
Program Verification
\end_layout

\begin_layout Standard
La 
\emph on
program verification
\emph default
 mira a utilizzare prove formali per dimostrare che i programmi si comportano
 secondo le specifiche.
\end_layout

\begin_layout Standard
TODO
\end_layout

\begin_layout Section
Analisi statica
\end_layout

\begin_layout Standard
Nella programmazione 
\emph on
lint
\emph default
 o 
\emph on
lint-like tools 
\emph default
indicano strumenti che eseguono un'analisi statica del codice.
\end_layout

\begin_layout Subsection
Pylint
\end_layout

\begin_layout Standard
Il tool multifunzionale 
\emph on
pylint
\emph default
 è stato usato per l'analisti statica e comprende:
\end_layout

\begin_layout Itemize
Coding standards: check sulla lunghezza delle linee di codice, check sui
 nomi delle variabili (notazioni), check sui moduli importati e usati.
\end_layout

\begin_layout Itemize
Error detection: check sulle interfacce e la loro implementazione.
\end_layout

\begin_layout Itemize
Refractoring: detection di codice duplicato.
\end_layout

\begin_layout Itemize
UML diagrams: 
\emph on
pylint
\emph default
 integra 
\emph on
pyreverse
\emph default
 che permette l'esportazione automatica di diagrammi UML riguardanti le
 classi, i package e la struttura del database in formato 
\emph on
.dot
\emph default
 o 
\emph on
.png
\emph default
.
\end_layout

\begin_layout Standard
Grazie ai seguenti comandi è possibile installare pylint, successivamente
 fare una scansione automatica dell'apps shop scegliendo se farla completa,
 solo sugli errori evitando i warning oppure fare anche un test sulla performanc
e del database.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ pylint --rcfile=./.pylintrc ./shop
\end_layout

\begin_layout Plain Layout

$ pylint --rcfile=./.pylintrc --errors-only ./shop
\end_layout

\begin_layout Plain Layout

$ pylint --rcfile=./.pylintrc --load-plugins pylint_django --load-plugins
 pylint_django.checkers.db_performance ./shop
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Grazie al file .
\emph on
pylintrc
\emph default
 è possibile personalizzare interamente i parametri della ricerca andando
 a settare le varie impostazioni al proprio interno; la configurazione si
 può trovare nel file .
\emph on
pylintrc
\emph default
 presente nella cartella base.
 Gli errori più comuni sono:
\end_layout

\begin_layout Itemize
C0103 Doesn't conform to snake_case naming style 
\end_layout

\begin_layout Itemize
C0114 Missing-module-docstring 
\end_layout

\begin_layout Itemize
C0115 Missing class docstring 
\end_layout

\begin_layout Itemize
C0116 Missing function or method docstring 
\end_layout

\begin_layout Itemize
C0301 Line too long
\end_layout

\begin_layout Itemize
C0330 Wrong hanging indentation before block
\end_layout

\begin_layout Itemize
E1101 Class 'X' has no 'objects' member
\end_layout

\begin_layout Standard
Nella figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "Pylint"
plural "false"
caps "false"
noprefix "false"

\end_inset

 è riportato l'output di 
\emph on
pylint
\emph default
 dove viene valutato il codice su una scala da 0 a 10.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename screenshot/Pylint.png
	lyxscale 75
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset CommandInset label
LatexCommand label
name "Pylint"

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Pylint
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
TODO (Risolvere)
\end_layout

\begin_layout Subsection
Flake8
\end_layout

\begin_layout Standard
Il pacchetto 
\emph on
flake8
\emph default
 è un altro strumento per l'analisi del codice.
\end_layout

\begin_layout Standard
Al suo interno integra i seguenti tools:
\end_layout

\begin_layout Itemize

\emph on
pyflakes
\end_layout

\begin_layout Itemize

\emph on
pycodestyle
\emph default
 
\end_layout

\begin_layout Itemize

\emph on
Ned Batchelder’s McCabe script 
\end_layout

\begin_layout Standard
Si basa anche sulla specifica 
\emph on

\begin_inset Quotes fld
\end_inset

PEP 8 -- Style Guide for Python Code
\begin_inset Quotes frd
\end_inset

 
\emph default
per il controllo dello stile del codice Python.
\end_layout

\begin_layout Standard
Dopo averlo installato, si può eseguire il seguente comando per una rapida
 analisi del codice:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ flake8 -v --count
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Verrà restituito in output un elenco di violazioni ognuna con uno specifico
 codice identificativo del tipo di violazione; violazioni comuni sono:
\end_layout

\begin_layout Itemize
E501 Line too long (90 > 79 characters)
\end_layout

\begin_layout Itemize
F405 'User' may be undefined, or defined from star imports
\end_layout

\begin_layout Standard
È possibile nascondere questi errori comuni per far risaltare altri errori
 magari più gravi usando questo comando:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ flake8 -v --count --ignore=E501,F405
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Dopo varie iterazioni, sfruttando tool come 
\emph on
black
\emph default
 per risolvere l'errore E501 ad esempio, si è potuto ridurre di molto le
 violazioni.
\end_layout

\begin_layout Subsection
Bandit
\end_layout

\begin_layout Standard

\emph on
Bandit
\emph default
 è un framework per eseguire analisi di sicurezza del codice sorgente Python,
 utilizzando il modulo 
\emph on
ast
\emph default
 della Python Standard Library.
\end_layout

\begin_layout Standard
Il modulo 
\emph on
ast
\emph default
 viene utilizzato per convertire il codice sorgente in un albero analizzato
 di nodi di sintassi Python.
 Bandit consente agli utenti di definire test personalizzati che vengono
 eseguiti su tali nodi.
 Al termine del test, viene generato un rapporto che elenca i problemi di
 sicurezza identificati nel codice sorgente di destinazione.
\end_layout

\begin_layout Standard
Dopo averlo installato, si può eseguire il seguente comando:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ bandit -r -v .
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Verranno elencate le vulnerabilità trovate in un report con sommario finale
 come in figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "Bandit"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename screenshot/Bandit.png
	lyxscale 75

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset CommandInset label
LatexCommand label
name "Bandit"

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Bandit
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Dopo aver eliminato e risolto vulnerabilità anche gravi trovate nel codice,
 le uniche rimaste sono:
\end_layout

\begin_layout Itemize

\emph on
\begin_inset Quotes fld
\end_inset

[B311:blacklist] Standard pseudo-random generators are not suitable for
 security/cryptographic purposes
\emph default

\begin_inset Quotes frd
\end_inset

 che tuttavia si può ignorare perchè i numeri random generati nel codice
 non riguardano algoritmi crittografici o relativi alla sicurezza del sistema.
\end_layout

\begin_layout Itemize

\emph on
\begin_inset Quotes fld
\end_inset

[B101:assert_used] Use of assert detected.
 The enclosed code will be removed when compiling to optimised byte code
\begin_inset Quotes frd
\end_inset


\emph default
 che tuttavia si può ignorare perchè sono stati effettuati ulteriori controlli
 oltre agli assert.
\end_layout

\begin_layout Subsection
Pyreverse e GraphViz
\end_layout

\begin_layout Standard
I tool 
\emph on
pyreverse
\emph default
 e 
\emph on
GraphViz
\emph default
 sono usati per esportare diagrammi UML riguardanti le class e i packages
 di ogni modulo.
 Inoltre è possibile esportare pure lo schema entità relazione del database.
\end_layout

\begin_layout Standard
Dopo aver installato 
\emph on
pyreverse
\emph default
 e 
\emph on
GraphViz
\emph default
 (necessita anche di aggiungere 
\emph on
bin/gvedit.exe
\emph default
 nel path delle variabili d'ambiente) si possono usare con i seguenti comandi:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ pyreverse -o png -A -s 0 -a 0 -k authentication  shop timetable transfer
 --ignore=migrations,tests,tests.py
\end_layout

\begin_layout Plain Layout

$ pyreverse -o png -A -s 0 -a 0 -k  shop --ignore=migrations,tests,tests.py
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

$ python manage.py graph_models -a -o models.png
\end_layout

\begin_layout Plain Layout

$ python manage.py graph_models authentication shop timetable transfer -o
 apps.png
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Nella figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "Classes"
plural "false"
caps "false"
noprefix "false"

\end_inset

 sono rappresentate le classi dell'intera applicazione:
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename img/Classes.png
	lyxscale 30
	scale 27.5
	rotateAngle 90

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset CommandInset label
LatexCommand label
name "Classes"

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Classes
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Nella figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "Packages"
plural "false"
caps "false"
noprefix "false"

\end_inset

 sono rappresentate le interazioni tra i vari package dell'applicazione.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename img/Packages.png
	lyxscale 30
	scale 30

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset CommandInset label
LatexCommand label
name "Packages"

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Packages
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Code Refactoring
\end_layout

\begin_layout Standard
Il 
\emph on
code refactoring
\emph default
 è il processo di modifica di un sistema software in modo tale da migliorare
 la sua struttura interna del codice senza alterarne il comportamento esterno.
\end_layout

\begin_layout Standard
È una fase molto importante dello sviluppo del software, rende il codice
 più semplice da leggere e più facile da estendere.
 Molto spesso ci si accorge che man mano che il progetto diventa grande,
 sia necessaria una nuova struttura del codice e dei vari componenti.
\end_layout

\begin_layout Standard

\series bold
App:
\end_layout

\begin_layout Standard
In questo caso inizialmente l'intero progetto era contenuto in un'unica
 app, tuttavia la necessità di semplificare il codice e raggruppare le funzioni
 ha portato alla divisione del progetto in quattro distinte componenti:
\end_layout

\begin_layout Itemize

\emph on
authentication
\emph default
: modulo che si occupa di tutta la parte di autenticazione e registrazione
 degli utenti e dei permessi relativi.
\end_layout

\begin_layout Itemize

\emph on
shop
\emph default
: modulo principale che si occupa di gestire tutta la parte di presentazione,
 acquisto e vendita dei farmaci e della gestione delle farmacie.
\end_layout

\begin_layout Itemize

\emph on
timetable
\emph default
: modulo che si occupa della presentazione e del calcolo degli orari settimanali
 delle farmacie.
\end_layout

\begin_layout Itemize

\emph on
transfer
\emph default
: modulo che si occupa del trasferimento dei farmaci tra la farmacia.
\end_layout

\begin_layout Standard
Dopo aver deciso la nuova struttura del progetto raggruppando in base al
 contesto, bisogna spostare tutti i modelli attinenti alla componente più
 appropriata.
 In 
\emph on
authentication
\emph default
 sono presenti i modelli relativi agli utenti, in 
\emph on
timetable
\emph default
 quelli relativi agli orari delle farmacie, in 
\emph on
transfer 
\emph default
quelli relativi alle richieste dei medicinali e in 
\emph on
shop
\emph default
 la restante grande parte che si occupa di gestire le funzionalità del sito.
\end_layout

\begin_layout Standard
Grazie a questa divisione si è potuto rendere il codice più leggibile, rendere
 chiaro i collegamenti e le interdipendenze tra i vari moduli e si è potuto
 sviluppare ogni algoritmo (
\emph on
timetable
\emph default
, 
\emph on
transfer
\emph default
) in modo isolato.
 Inoltre è stato possibile accorpare ed eliminare funzionalità duplicate
 o modelli inutilizzati.
\end_layout

\begin_layout Standard
I numerosi test presenti nel progetto sono anch'essi divisi in base al modulo
 di appartenenza e possono essere eseguiti in modo indipendente attraverso
 appositi comandi.
\end_layout

\begin_layout Standard
Naturalmente spostare tutti i modelli e fare il refractoring del codice
 non è stata una cosa semplice.
 I principali passaggi effettuati possono concentrarsi nei seguenti punti:
\end_layout

\begin_layout Itemize
Rinominare tutte le tabelle durante lo spostamento per adattarsi alla nuova
 struttura di destinazione ed evitare conflitti.
\end_layout

\begin_layout Itemize
Fare una migrazione per spostare i modelli nell'app di destinazione.
\end_layout

\begin_layout Itemize
Aggiornare eventuali foreign keys and relations tra i vari modelli (anche
 di app differenti).
\end_layout

\begin_layout Itemize
Fare una migrazione per eliminare i modelli dall'applicazione di origine.
\end_layout

\begin_layout Standard

\series bold
API:
\end_layout

\begin_layout Standard
Allo stesso modo le varie Application Programming Interface sono state separate
 nei vari moduli.
\end_layout

\begin_layout Standard

\emph on
Vedi REST API.
\end_layout

\begin_layout Standard

\series bold
Algoritmi:
\end_layout

\begin_layout Standard
Isolati gli algoritmi, la loro stesura è stata migliorata e divisa in più
 funzioni ognuna con uno scopo preciso.
 Si è usato anche un data flow chart per ristrutturare il codice in modo
 da rendere chiara la divisione in varie casistiche.
\end_layout

\begin_layout Standard

\emph on
Vedi fasi precedenti riguardanti gli algoritmi.
\end_layout

\begin_layout Standard

\series bold
Codice:
\end_layout

\begin_layout Standard
È stato usato 
\emph on
black
\emph default
, un formattatore di codice per Python in cui ogni riga del codice viene
 formattata automaticamente liberando lo sviluppatore di questo compito.
\end_layout

\begin_layout Standard
Può essere usato con il seguente comando, in cui l'opzione 
\emph on
–check
\emph default
 mostra in output i file che verrebbero riformattati in 
\emph on
dry run:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ black .
 --line-length 79 --check
\end_layout

\begin_layout Plain Layout

$ black .
 --line-length 79
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\series bold
Documentazione:
\end_layout

\begin_layout Standard
Nel pannello admin, all'indirizzo 
\emph on
admin/doc/ 
\emph default
è possibile visualizzare la documentazione presa dalle docstrings dei models,
 views, template tags e template filters di ogni app installata nel progetto.
\end_layout

\begin_layout Standard

\emph on
Vedi REST API.
\end_layout

\begin_layout Standard

\series bold
Performance:
\end_layout

\begin_layout Standard
L'analisi della performance degli algortimi si può trarre dell'analisi di
 complessità degli algoritmi descritta nelle fasi precedenti.
\end_layout

\begin_layout Standard

\emph on
Vedi analisi di complessità degli algoritmi.
\end_layout

\begin_layout Standard

\series bold
Variabili:
\end_layout

\begin_layout Standard
In generale nell'applicazione sono state rinominate molte variabili per
 rendere più esplicito e facilmente intuibile il loro scopo usando anche
 lo stile 
\emph on
snake_case
\emph default
; anche gli import dei pacchetti necessari sono stati riorganizzati.
\end_layout

\begin_layout Standard
TODO (Vario)
\end_layout

\begin_layout Section
Integrazione con CI
\end_layout

\begin_layout Standard
In 
\emph on
GitHub Actions
\emph default
 sono state integrate gran parte delle verifiche sul codice nel file 
\emph on
django-verification.yml
\emph default
.
 I passi sono i seguenti:
\end_layout

\begin_layout Itemize
Viene configurato l'ambiente (
\emph on
Ubuntu
\emph default
) e installata la versione corretta di Python, in questo caso la 3.8.
\end_layout

\begin_layout Itemize
Vengono soddisfatte tutte le dipendenze installando i pacchetti indicati
 nel file 
\emph on
requirements.txt 
\emph default
(sfruttando anche la cache).
\end_layout

\begin_layout Itemize
Viene effettuata l'analisi del codice con 
\emph on
pylint
\emph default
.
\end_layout

\begin_layout Itemize
Viene eseguito black per formattare il codice Python.
\end_layout

\begin_layout Standard

\series bold
Nota:
\series default
 I contratti sono già stati verificati quando vengono eseguiti i casi di
 test nella fase di testing.
\end_layout

\begin_layout Section
Code Inspection
\end_layout

\begin_layout Standard
La 
\emph on
checklist
\emph default
 è un elemento fondamentale dell'ispezione classica.
 Riassumono l'esperienza accumulata nei progetti precedenti per guidare
 le sessioni di revisione.
 Una checklist contiene una serie di domande che aiutano a identificare
 i difetti del modulo ispezionato.
 Una buona checklist dovrebbe essere aggiornata regolarmente per rimuovere
 le parti obsolete e per aggiungere nuovi controlli suggeriti dall'esperienza
 accumulata.
 Tipici controlli riguardano:
\end_layout

\begin_layout Itemize
Design and Architecture errors
\end_layout

\begin_layout Itemize
Computation errors
\end_layout

\begin_layout Itemize
Comparison errors
\end_layout

\begin_layout Itemize
Control flow errors
\end_layout

\begin_layout Itemize
Subroutine parameter errors
\end_layout

\begin_layout Itemize
Input/Output errors
\end_layout

\begin_layout Itemize
Memory allocation errors
\end_layout

\begin_layout Itemize
Error discovered from previous code reviews
\end_layout

\begin_layout Itemize
Other check (Pass the lint test?...)
\end_layout

\begin_layout Standard
Uso la seguente checklist sulla mia app shop:
\end_layout

\begin_layout Standard
All Tests:
\end_layout

\begin_layout Itemize
The CI jobs on the pull request have passed.
 
\emph on
Yes, I controlled the last push.
\end_layout

\begin_layout Itemize
It is obvious what the test is trying to test.
 
\emph on
Yes, it is documented.
\end_layout

\begin_layout Itemize
The test passes when it’s supposed to pass.
 
\emph on
Yes, positive case passed.
\end_layout

\begin_layout Itemize
The test fails when it’s supposed to fail.
 
\emph on
Yes, negative case passed.
\end_layout

\begin_layout Itemize
The test is testing what it thinks it’s testing.
 
\emph on
Yes
\emph default
.
\end_layout

\begin_layout Itemize
The spec backs up the expected behavior in the test.
 
\emph on
Yes, conforms to specifications.
\end_layout

\begin_layout Itemize
The test is automated as either reftest or a script test unless there’s
 a very good reason for it not to be.
 
\emph on
Yes, the test is automated and started with a command line.
\end_layout

\begin_layout Itemize
The test does not use external resources.
 
\emph on
No, it use only packages imported.
\end_layout

\begin_layout Itemize
The test does not use proprietary features (vendor-prefixed or otherwise).
 
\emph on
No, it doesn't use propretary features.
\end_layout

\begin_layout Itemize
The test does not contain commented-out code.
 
\emph on
Yes, only a Selenium test is commented in order to avoid long execution
 times.
\end_layout

\begin_layout Itemize
The test is placed in the relevant directory.
 
\emph on
Yes, every test related to a specific app is located inside tests.py in the
 app's directory.
\end_layout

\begin_layout Itemize
The test has a reasonable and concise filename.

\emph on
 No, it's just tests.py.
\end_layout

\begin_layout Itemize
If the test needs code running on the server side, the server code must
 be written in Python, and the Python code must not do anything potentially
 unsafe.
 
\emph on
Yes, only in localhost for now.
\end_layout

\begin_layout Itemize
If the test needs to be run in some non-standard configuration or needs
 user interaction, it is a manual test.
 
\emph on
No, it is all automated.
\end_layout

\begin_layout Itemize
Nit: The title is descriptive but not too wordy.
 
\emph on
Yes, the title has coincided but clear.
\end_layout

\begin_layout Standard
Reftests Only: 
\emph on
(Not used)
\end_layout

\begin_layout Itemize
The reference file is accurate and will render pixel-perfect identically
 to the test on all platforms.
\end_layout

\begin_layout Itemize
The reference file uses a different technique that won’t fail in the same
 way as the test.
\end_layout

\begin_layout Itemize
The test and reference render within a 800x600 viewport, only displaying
 scrollbars if their presence is being tested.
\end_layout

\begin_layout Itemize
Nit: The test has a self-describing statement.
\end_layout

\begin_layout Itemize
Nit: The self-describing statement is accurate, precise, simple, and self-explan
atory.
 Someone with no technical knowledge should be able to say whether the test
 passed or failed within a few seconds, and not need to spend several minutes
 thinking or asking questions.
 
\end_layout

\begin_layout Standard
Script Tests Only:
\end_layout

\begin_layout Itemize
The number of tests in each file and the test names are consistent across
 runs and browsers.
 It is best to avoid the pattern where there is a test that asserts that
 the feature is supported and bails out without running the rest of the
 tests in the file if it isn’t.
 
\emph on
Yes, the number of tests in each file and the test names are consistent.
\end_layout

\begin_layout Itemize
The test avoids patterns that make it less likely to be stable.
 In particular, tests should avoid setting internal timeouts, since the
 time taken to run it may vary on different devices; events should be used
 instead (if at all possible).
 
\emph on
Yes, test avoids patterns that make it less likely to be stable.
\end_layout

\begin_layout Itemize
The test uses the most specific asserts possible (e.g.
 doesn’t use assert_true for everything).
 
\emph on
Yes, it use the proper assert, for example assertEqual, assertTrue, assertExcept
ion.
\end_layout

\begin_layout Itemize
Nit: Tests in a single file are separated by one empty line.
 
\emph on
Yes, everything is in order.
\end_layout

\begin_layout Standard
Visual Tests Only: 
\emph on
(Not used)
\end_layout

\begin_layout Itemize
The test has a self-describing statement.
\end_layout

\begin_layout Itemize
The self-describing statement is accurate, precise, simple, and self-explanatory.
 Someone with no technical knowledge should be able to say whether the test
 passed or failed within a few seconds, and not need to spend several minutes
 thinking or asking questions.
\end_layout

\begin_layout Itemize
The test renders within a 800x600 viewport, only displaying scrollbars if
 their presence is being tested.
\end_layout

\begin_layout Itemize
The test renders to a fixed, static page with no animation.
 
\end_layout

\begin_layout Standard
TODO (Aggiungere)
\end_layout

\begin_layout Chapter
Model Verification
\end_layout

\begin_layout Standard
TODO
\end_layout

\begin_layout Chapter
Model Based Testing
\end_layout

\begin_layout Standard
TODO
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\end_body
\end_document
